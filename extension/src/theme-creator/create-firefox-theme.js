/**
 * @license MIT
 * Copyright 2025 VannRR <https://github.com/vannrr>
 *
 * see the LICENSE file for details
 */

import {
  argbFromRgb,
  hexFromArgb,
  themeFromSourceColor,
} from "@material/material-color-utilities";
import { getAutogeneratedThemeColors } from "./autogenerated-theme-util";
import { isDark } from "./color-utils";

/**
 * @typedef {Object} FirefoxThemeColors
 * @property {string} toolbar
 * @property {string} toolbar_text
 * @property {string} frame
 * @property {string} tab_background_text
 * @property {string} toolbar_field
 * @property {string} toolbar_field_text
 * @property {string} tab_line
 * @property {string} popup
 * @property {string} popup_text
 * @property {string} button_background_hover
 * @property {string} icons
 * @property {string} toolbar_field_border_focus
 * @property {string} toolbar_field_border
 * @property {string} toolbar_field_focus
 * @property {string} toolbar_field_highlight_text
 * @property {string} toolbar_field_highlight
 */

/**
 * @typedef {Object} FirefoxThemeProperties
 * @property {"auto"|"light"|"dark"|"system"} color_scheme
 */

/**
 * @typedef {Object} FirefoxTheme
 * @property {FirefoxThemeColors} colors
 * @property {FirefoxThemeProperties} properties
 */

/**
 * Generates a frozen Firefox theme object from an RGB base color.
 *
 * @param {number} r - Red channel (0–255)
 * @param {number} g - Green channel (0–255)
 * @param {number} b - Blue channel (0–255)
 * @returns {Readonly<FirefoxTheme>} A read-only theme definition ready to be passed to browser.theme.update.
 */
export function createFirefoxTheme(r, g, b) {
  const argb = argbFromRgb(r, g, b);

  const themeColors = getAutogeneratedThemeColors(argb);

  const matTheme = themeFromSourceColor(argb);
  const isDarkScheme = isDark(argb);
  const scheme = isDarkScheme ? matTheme.schemes.dark : matTheme.schemes.light;

  return Object.freeze({
    colors: {
      toolbar: hexFromArgb(themeColors.activeTabColor),
      toolbar_text: hexFromArgb(themeColors.activeTabTextColor),
      frame: hexFromArgb(themeColors.frameColor),
      tab_background_text: hexFromArgb(scheme.secondary),
      toolbar_field: hexFromArgb(scheme.onSecondary),
      toolbar_field_text: hexFromArgb(themeColors.activeTabTextColor),
      tab_line: hexFromArgb(scheme.primary),
      popup: hexFromArgb(scheme.background),
      popup_text: hexFromArgb(themeColors.activeTabTextColor),
      button_background_hover: hexFromArgb(scheme.primaryContainer),
      icons: hexFromArgb(scheme.secondary),
      toolbar_field_border_focus: hexFromArgb(scheme.primary),
      toolbar_field_border: hexFromArgb(scheme.outline),
      toolbar_field_focus: hexFromArgb(themeColors.activeTabColor),
      toolbar_field_highlight_text: hexFromArgb(scheme.background),
      toolbar_field_highlight: hexFromArgb(scheme.primary),
    },
    properties: {
      color_scheme: isDarkScheme ? "dark" : "light",
    },
  });
}
